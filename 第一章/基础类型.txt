为了让程序有价值，我们需要能够处理最简单的数据单元：数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用

布尔值
  let isDone: boolean = false;


数字
  和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。
  
  let a: number = 6;
  let b: number = 0xf00d;
  let c: number = 0b1010;
  let d: number = 0o744;

字符串
  JavaScript程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 string表示文本数据类型。 和JavaScript一样，可以使用双引号（ "）或单引号（'）表示字符串。

  let name: string = "bob";
  name = "smith";

  你还可以使用模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（ `），并且以${ expr }这种形式嵌入表达式



  let name: string = `Gene`;
  let age: number = 37;
  let sentence: string = `Hello, my name is ${ name }.

    I'll be ${ age + 1 } years old next month.`;


数组
   TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组

   let list: number[] = [1, 2, 3];

   第二种方式是使用数组泛型，Array<元素类型>

   let list: Array<number> = [1, 2, 3];


元组 Tuple
   元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string和number类型的元组。

	let x: [string, number];
	// Initialize it
	x = ['hello', 10]; // OK
	// Initialize it incorrectly
	x = [10, 'hello']; // Error



枚举
  enum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。

  enum Color {Red, Green, Blue}
  let c: Color = Color.Green;

  默认情况下，从0开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 1开始编号

  enum Color {Red = 1, Green, Blue}
  let c: Color = Color.Green;

  enum Color {Red = 1, Green = 2, Blue = 4}
  let c: Color = Color.Green;


  枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字，我们可以查找相应的名字：

  enum Color {Red = 1, Green, Blue}
  let colorName: string = Color[2];

  console.log(colorName);  // 显示'Green'因为上面代码里它的值是2










	